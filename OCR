using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas.Parser;
using iText.Kernel.Pdf.Canvas.Parser.Listener;
using iText.IO.Image;
using Tesseract;
using System;
using System.Drawing.Imaging;
using System.IO;
using System.Drawing;

class Program
{
    static void Main()
    {
        string pdfPath = @"C:\path\to\scanned.pdf";
        string tessDataPath = @"C:\Program Files\Tesseract-OCR\tessdata";

        using var pdfDoc = new PdfDocument(new PdfReader(pdfPath));
        var engine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);

        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
        {
            var page = pdfDoc.GetPage(i);
            var strategy = new FilteredEventListener();
            var imageRenderListener = new ImageRenderListener(i);
            strategy.AttachEventListener(imageRenderListener);
            PdfCanvasProcessor parser = new PdfCanvasProcessor(strategy);
            parser.ProcessPageContent(page);

            foreach (var imagePath in imageRenderListener.ImagePaths)
            {
                using var img = Pix.LoadFromFile(imagePath);
                using var result = engine.Process(img);
                Console.WriteLine($"Text on page {i}:\n{result.GetText()}");
                File.Delete(imagePath); // Clean up temp file
            }
        }
    }

    class ImageRenderListener : IEventListener
    {
        private readonly int _pageNum;
        public List<string> ImagePaths { get; } = new List<string>();

        public ImageRenderListener(int pageNum) => _pageNum = pageNum;

        public void EventOccurred(IEventData data, EventType type)
        {
            if (type == EventType.RENDER_IMAGE)
            {
                var renderInfo = (ImageRenderInfo)data;
                var imageObj = renderInfo.GetImage();
                var imgBytes = imageObj.GetImageBytes();
                var img = System.Drawing.Image.FromStream(new MemoryStream(imgBytes));
                var fileName = Path.Combine(Path.GetTempPath(), $"page_{_pageNum}.png");
                img.Save(fileName, ImageFormat.Png);
                ImagePaths.Add(fileName);
            }
        }

        public ICollection<EventType> GetSupportedEvents() => new[] { EventType.RENDER_IMAGE };
    }
}

using System;
using System.IO;
using ImageMagick;
using Tesseract;

class Program
{
    static void Main()
    {
        string pdfPath = @"C:\path\to\your\scanned.pdf";
        string tessDataPath = @"C:\tessdata"; // path to traineddata folder

        using var engine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);

        using var images = new MagickImageCollection();
        images.Read(pdfPath);

        int pageIndex = 1;
        foreach (var image in images)
        {
            using var memStream = new MemoryStream();
            image.Format = MagickFormat.Png;
            image.Write(memStream);
            memStream.Position = 0;

            using var img = new System.Drawing.Bitmap(memStream);
            using var pix = PixConverter.ToPix(img);
            using var result = engine.Process(pix);
            
            Console.WriteLine($"--- Page {pageIndex} ---");
            Console.WriteLine(result.GetText());
            pageIndex++;
        }
    }
}

using iTextSharp.text.pdf;
using System.Drawing;
using System.Drawing.Imaging;

public void ConvertPdfToPng(string pdfPath, string outputFolder)
{
    // Create output directory if it doesn't exist
    Directory.CreateDirectory(outputFolder);
    
    using (var document = new PdfReader(pdfPath))
    {
        for (int page = 1; page <= document.NumberOfPages; page++)
        {
            // Set resolution (DPI)
            var pdfDoc = new iTextSharp.text.Document();
            var writer = PdfWriter.GetInstance(pdfDoc, new MemoryStream());
            pdfDoc.Open();
            
            // Get the page
            var importedPage = writer.GetImportedPage(document, page);
            
            // Create bitmap
            var bitmap = new Bitmap(importedPage.Width, importedPage.Height);
            using (var g = Graphics.FromImage(bitmap))
            {
                g.Clear(Color.White);
                g.DrawImage(bitmap, 0, 0, importedPage.Width, importedPage.Height);
            }
            
            // Save as PNG
            string outputPath = Path.Combine(outputFolder, $"page_{page}.png");
            bitmap.Save(outputPath, ImageFormat.Png);
        }
    }
}

using PdfiumViewer;
using System.Drawing.Imaging;

public void ConvertPdfToPngUsingPdfium(string pdfPath, string outputFolder, int dpi = 300)
{
    Directory.CreateDirectory(outputFolder);
    
    using (var document = PdfDocument.Load(pdfPath))
    {
        for (int i = 0; i < document.PageCount; i++)
        {
            using (var image = document.Render(i, (int)(dpi * 1.5), (int)(dpi * 1.5), dpi, dpi, false))
            {
                string outputPath = Path.Combine(outputFolder, $"page_{i + 1}.png");
                image.Save(outputPath, ImageFormat.Png);
            }
        }
    }
}


using System;
using System.Drawing;
using System.IO;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas.Parser.Listener;
using iText.Kernel.Pdf.Canvas.Parser;
using iText.Kernel.Pdf.Canvas;

public class PdfToPngConverter
{
    public static void Convert(string pdfPath, string outputDirectory, int dpi = 300)
    {
        if (!Directory.Exists(outputDirectory))
            Directory.CreateDirectory(outputDirectory);

        // Load PDF
        using (var pdfDoc = new PdfDocument(new PdfReader(pdfPath)))
        {
            var numberOfPages = pdfDoc.GetNumberOfPages();

            for (int pageNum = 1; pageNum <= numberOfPages; pageNum++)
            {
                var page = pdfDoc.GetPage(pageNum);

                // Create a PDF renderer
                var renderer = new PdfCanvasRenderer(page);

                // Render to a System.Drawing.Bitmap
                var pdfPageSize = page.GetPageSize();
                int width = (int)(pdfPageSize.GetWidth() * dpi / 72);
                int height = (int)(pdfPageSize.GetHeight() * dpi / 72);

                using (var bitmap = new Bitmap(width, height))
                using (var graphics = Graphics.FromImage(bitmap))
                {
                    graphics.Clear(Color.White);
                    renderer.Render(graphics, width, height);

                    // Save as PNG
                    string outputPath = Path.Combine(outputDirectory, $"page_{pageNum}.png");
                    bitmap.Save(outputPath, System.Drawing.Imaging.ImageFormat.Png);
                }
            }
        }
    }
}

// Usage:
PdfToPngConverter.Convert("input.pdf", "output_images", 300);


using System;
using System.IO;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas.Parser;
using iText.Kernel.Pdf.Canvas.Parser.Listener;

public class PdfImageExtractor
{
    public static void ExtractImages(string pdfPath, string outputDir)
    {
        if (!Directory.Exists(outputDir))
            Directory.CreateDirectory(outputDir);

        using (var pdfDoc = new PdfDocument(new PdfReader(pdfPath)))
        {
            var strategy = new ImageExtractionStrategy(outputDir);
            for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
            {
                PdfCanvasProcessor parser = new PdfCanvasProcessor(strategy);
                parser.ProcessPageContent(pdfDoc.GetPage(i));
            }
        }
    }
}

public class ImageExtractionStrategy : IEventListener
{
    private readonly string _outputDir;
    private int _imageCount = 0;

    public ImageExtractionStrategy(string outputDir)
    {
        _outputDir = outputDir;
    }

    public void EventOccurred(IEventData data, EventType type)
    {
        if (data is ImageRenderInfo imageData)
        {
            var image = imageData.GetImage();
            if (image == null) return;

            byte[] bytes = image.GetImageBytes();
            string outputPath = Path.Combine(_outputDir, $"image_{_imageCount++}.png");
            File.WriteAllBytes(outputPath, bytes);
        }
    }

    public ICollection<EventType> GetSupportedEvents() => new List<EventType> { EventType.RENDER_IMAGE };
}

// Usage:
PdfImageExtractor.ExtractImages("scanned.pdf", "output_images");







